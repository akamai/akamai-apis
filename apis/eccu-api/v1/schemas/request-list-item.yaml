type: object
description: |-
  Provides information about an ECCU request.
  
x-akamai:
  file-path: schemas/request-list-item.yaml
additionalProperties: false
required:
- propertyName
- propertyNameExactMatch
- propertyType
properties:
  version:
    type: string
    description: |
      Use this to mark differences in your refresh requests.
    minLength: 1
  extendedStatusMessage:
    type: string
    description: |
      Further detail about the status of a request. Typically there is more information provided for a failed refresh request.
    minLength: 1
  notes:
    type: string
    description: |
      Contains tags that define a refresh request based on request parameters such as directory path and file extension. Use only ASCII characters. For more information on the format of an ECCU request file and metadata tag usage, see [Create the ECCU request file](https://techdocs.akamai.com/purge-cache/docs/create-eccu-req-file).
    minLength: 1
  propertyName:
    type: string
    description: |
      Identifies the digital property whose content you want to refresh.
    minLength: 1
  propertyNameExactMatch:
    type: boolean
    description: |
      Specifies whether to exactly match the full string of the `propertyName`, or to perform an inexact right hand side (RHS) substring match. For example, with `propertyNameExactMatch` enabled, `example.com` doesn't match `www.example.com`.
  propertyType:
    type: string
    description: |
      Specifies the type of digital property. Either `ARL_TOKEN` or `HOST_HEADER`. This tells the edge network whether the purge information is contained in the ARL, or in a configuration file. The ARL is similar to the URL, but the ARL is specifically defined for objects to be served by the edge network. There are two types of ARLs, v1 and v2. For details, see the [Purge Cache documentation](https://techdocs.akamai.com/purge-cache/docs/digital-props).
    enum:
    - ARL_TOKEN
    - HOST_HEADER
  requestDate:
    type: string
    description: |
      The time the refresh request was submitted, in ISO 8601 format.
    format: date-time
  requestId:
    type: integer
    description: |
      A unique identifier for the refresh request. Use this to track issues with the request.
    minimum: 0
  requestName:
    type: string
    description: |
      The name that you give to the refresh request.
    minLength: 1
  requestor:
    type: string
    description: |
      The username of the person who submitted the request. For example, `john-doe@example.com`.
    minLength: 1
  status:
    type: string
    description: |
      Specifies the condition of the refresh request. Possible values are `PENDING`, `SUCCEEDED`, `FAILED`, or `IGNORED`. If you form the `metadata` incorrectly, the refresh request fails.
    enum:
    - FAILED
    - IGNORED
    - PENDING
    - SUCCEEDED
  statusMessage:
    type: string
    description: |
      Details about the `status` of the refresh request.
    minLength: 1
  statusUpdateDate:
    type: string
    description: |
      The time the refresh request's `status` last changed, in ISO 8601 format.
    format: date-time
  statusUpdateEmails:
    type: array
    description: |
      A list of email addresses to notify when the `status` of the refresh request changes.
    minItems: 0
    items:
      type: string
      minLength: 1
