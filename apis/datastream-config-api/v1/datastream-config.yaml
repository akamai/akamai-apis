openapi: 3.0.0
info:
  title: DataStream 2 configuration
  version: '1'
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
- url: https://{hostname}/datastream-config-api/v1/log
x-akamai:
  auth-type: EDGE_GRID
  file-path: datastream-config.yaml
paths:
  /connectors:
    get:
      operationId: get-connectors
      summary: List connector types
      tags:
      - Connector types
      description: |
        Returns available connector types. You can use one of the connector types as a destination for log delivery in a stream configuration. See the [Create a stream](ref:post-stream) or [Edit a stream](ref:put-stream) operations.
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/ConnectorTypesExample.json
              schema:
                $ref: schemas/ConnectorTypes.yaml
  /datasets/template/{templateName}:
    parameters:
    - $ref: parameters/templateName-path.yaml
    get:
      operationId: get-template
      summary: List data set fields
      tags:
      - Data set fields
      description: |
        Returns groups of data set fields available in the template. You can choose the data set fields that you want to monitor in your logs in a stream configuration. See the [Create a stream](ref:post-stream) or [Edit a stream](ref:put-stream) operations. Note that `EDGE_LOGS` is the only `templateName` value currently available. Set the `productId` to get data set fields specific for your product along with those available for all products. If not set, the response returns common data set fields available for all products.
      parameters:
      - $ref: parameters/productId-query.yaml
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/DatasetsExample.json
              schema:
                $ref: schemas/Datasets.yaml
  /groups:
    get:
      operationId: get-groups
      summary: List groups
      tags:
      - Groups
      description: |
        Returns groups within the context of your account. These groups let you view and create stream configurations in properties that they have access to.
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/GroupsExample.json
              schema:
                $ref: schemas/Groups.yaml
  /products:
    get:
      operationId: get-products
      summary: List delivery products and associated groups
      tags:
      - Products
      description: |
        Returns products that you can collect logs for and the associated groups that have access to these products. It also provides data set templates that you can use with a product. You can use the relevant `productId` and its associated `groupId` to find the properties that you can monitor in your stream. See [List properties](ref:get-product-properties).
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/ProductsExample.json
              schema:
                $ref: schemas/Products.yaml
  /properties/group/{groupId}:
    parameters:
    - $ref: parameters/groupId-path.yaml
    get:
      operationId: get-group-properties
      summary: List properties by group
      tags:
      - Properties
      description: |
        Returns properties that are active on the production and staging network and available within a specific group. Run this operation to get and store the `propertyId` values for the [Create a stream](ref:post-stream) and [Edit a stream](ref:put-stream) operations.
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/PropertiesExample.json
              schema:
                $ref: schemas/Properties.yaml
  /properties/product/{productId}/group/{groupId}:
    parameters:
    - $ref: parameters/groupId-path.yaml
    - $ref: parameters/productId-path.yaml
    get:
      operationId: get-product-properties
      summary: List properties
      tags:
      - Properties
      description: |
        Returns properties that are active on the production and staging network for a specific product type that are available within a group. Run this operation to get and store the `propertyId` and `propertyName` values for the [Create a stream](ref:post-stream) and [Edit a stream](ref:put-stream) operations.
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/PropertiesExample.json
              schema:
                $ref: schemas/Properties.yaml
  /streamTypes:
    get:
      operationId: get-stream-types
      summary: List stream types
      tags:
      - Stream types
      description: |
        Returns available stream types that you can configure to monitor traffic of your properties. `RAW_LOGS` is the only stream type currently available.
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/StreamTypesExample.json
              schema:
                $ref: schemas/StreamTypes.yaml
  /streams:
    post:
      operationId: post-stream
      summary: Create a stream
      tags:
      - Streams
      description: |
        Creates a stream configuration. Within a stream configuration, you can select properties to associate with the stream, data set fields to monitor in logs, and a destination to send these logs to. Apart from the log and delivery frequency configurations, you can decide whether to activate the stream on making the request or later using the `activateNow` member. Note that only active streams collect and send logs to their destinations. See [Activate a stream](ref:put-stream-activate).
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/SaveStreamRequestExample.json
            schema:
              $ref: schemas/SaveStreamRequest.yaml
      responses:
        202:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/SaveStreamResponseExample.json
              schema:
                $ref: schemas/SaveStreamResponse.yaml
    get:
      operationId: get-streams
      summary: List streams
      tags:
      - Streams
      description: |
        Returns the latest versions of the stream configurations for all groups within in your account. You can use the `groupId` parameter to view the latest versions of all configurations in a specific group.
      parameters:
      - $ref: parameters/groupId-query.yaml
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/StreamsExample.json
              schema:
                $ref: schemas/Streams.yaml
  /streams/{streamId}:
    parameters:
    - $ref: parameters/streamId-path.yaml
    get:
      operationId: get-stream
      summary: Get a stream
      tags:
      - Streams
      description: |
        Returns information about any version of a stream, including details about the monitored properties, logged data set fields, and log delivery destination. If you omit the `version` query parameter, this operation returns the last version of the stream.
      parameters:
      - $ref: parameters/version-query.yaml
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/StreamDetailExample.json
              schema:
                $ref: schemas/StreamDetail.yaml
    put:
      operationId: put-stream
      summary: Edit a stream
      tags:
      - Streams
      description: |
        Updates the latest version of a stream. Running this operation creates a version of the stream that replaces the existing one. Note that only active streams collect and send logs to their destinations. See [Version management](ref:version-management) and [Activate a stream](ref:put-stream-activate).
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/EditStreamRequest2Example.json
            schema:
              $ref: schemas/EditStreamRequest.yaml
      responses:
        202:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/SaveStreamResponseExample.json
              schema:
                $ref: schemas/SaveStreamResponse.yaml
    delete:
      operationId: delete-stream
      summary: Delete a stream
      tags:
      - Streams
      description: |
        Deletes a deactivated stream. Deleting a stream means that you can't activate this stream again, and that you stop receiving logs for the properties that this stream monitors. Before deleting any stream, you need to deactivate it first. See [Deactivate a stream](ref:put-stream-deactivate).
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/DeleteSuccessResponseExample.json
              schema:
                $ref: schemas/DeleteStream.yaml
  /streams/{streamId}/activate:
    parameters:
    - $ref: parameters/streamId-path.yaml
    put:
      operationId: put-stream-activate
      summary: Activate a stream
      tags:
      - Streams
      description: |
        Activates the latest version of a stream. Activating a stream takes approximately an hour. Once a stream is active and the DataStream behavior is enabled in Property Manager, it starts collecting and sending logs to a destination. If you want to stop receiving these logs, you can deactivate a stream at any time. See the [Deactivate a stream](ref:put-stream-deactivate) operation.
      responses:
        202:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/StreamUpdateExample.json
              schema:
                $ref: schemas/StreamUpdate.yaml
  /streams/{streamId}/activationHistory:
    parameters:
    - $ref: parameters/streamId-path.yaml
    get:
      operationId: get-stream-activation-history
      summary: View activation history
      tags:
      - Activations
      description: |
        Returns a history of activation status changes for all versions of a stream.
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/ActivationHistoriesExample.json
              schema:
                $ref: schemas/ActivationHistories.yaml
  /streams/{streamId}/deactivate:
    parameters:
    - $ref: parameters/streamId-path.yaml
    put:
      operationId: put-stream-deactivate
      summary: Deactivate a stream
      tags:
      - Activations
      description: |
        Deactivates the latest version of a stream. Deactivating a stream means that you stop receiving logs for the properties that this stream monitors. Deactivating a stream takes approximately an hour. If you want to start receiving these logs again, you can activate this stream at any time. See the [Activate a stream](ref:put-stream-activate) operation.
      responses:
        202:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/StreamUpdateExample.json
              schema:
                $ref: schemas/StreamUpdate.yaml
  /streams/{streamId}/history:
    parameters:
    - $ref: parameters/streamId-path.yaml
    get:
      operationId: get-stream-history
      summary: View history
      tags:
      - History
      description: |
        Returns detailed information about all versions of a stream. It lets you track changes across all versions of a stream, including monitored properties, logged data set fields, log delivery destinations, and activation statuses.
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/ExampleStreamHistories.json
              schema:
                $ref: schemas/StreamHistories.yaml
