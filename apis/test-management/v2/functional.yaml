openapi: 3.0.0
info:
  title: Functional testing
  version: v2
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
- url: https://{hostname}/test-management/v2
x-akamai:
  auth-type: EDGE_GRID
  file-path: functional.yaml
paths:
  /functional/client-profiles:
    get:
      operationId: get-client-profiles
      summary: List client profiles
      tags:
      - Client profiles
      description: |
        Lists two client profiles that you can use in functional test cases. The response is an array of objects, each keyed by `clientProfileId`.
      responses:
        200:
          description: |
            The response provides client profiles.
          content:
            application/json:
              example:
                $ref: examples/get-client-profiles-response.json
              schema:
                $ref: schemas/getClientProfilesResponse.yaml
  /functional/client-profiles/{clientProfileId}:
    parameters:
    - $ref: parameters/clientProfileId-path.yaml
    get:
      operationId: get-client-profile
      summary: Get a client profile
      tags:
      - Client profiles
      description: |
        Returns details of a client profile.
      responses:
        200:
          description: |
            The response returns client profile details.
          content:
            application/json:
              example:
                $ref: examples/get-client-profile-response.json
              schema:
                $ref: schemas/get-client-profile-response.yaml
  /functional/client-profiles/{clientProfileId}/associations/test-cases:
    parameters:
    - $ref: parameters/clientProfileId-path.yaml
    get:
      operationId: get-client-profile-associations-test-cases
      summary: List functional test cases that use a client profile
      tags:
      - Client profiles
      description: |
        Lists all functional test cases that use a client profile. The response is an array of objects, each keyed by `testCaseId`.
      responses:
        200:
          description: |
            The response lists test cases.
          content:
            application/json:
              example:
                $ref: examples/associated-test-cases-of-client-profile-response.json
              schema:
                $ref: schemas/getTestCasesResponse.yaml
  /functional/config-versions:
    post:
      operationId: post-config-versions
      summary: Add a config version
      tags:
      - Config versions
      description: |
        Adds a new config version to Test Center from Property Manager. You can perform this operation only for properties added to Property Manager. If they're not added, see the [Property Manager API documentation](https://techdocs.akamai.com/property-mgr/reference/post-property-versions) or the [Property Manager webhelp](https://techdocs.akamai.com/property-mgr/docs/create-new-prop) to learn how to do it.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/create-config-version-request.json
            schema:
              $ref: schemas/createConfigVersionRequest.yaml
      responses:
        201:
          description: |
            Successfully created new config version.
          content:
            application/json:
              example:
                $ref: examples/get-config-version-response.json
              schema:
                $ref: schemas/get-config-version-response.yaml
    get:
      operationId: get-config-versions
      summary: List config versions
      tags:
      - Config versions
      description: |
        Lists config versions added to Test Center from Property Manager available in your organization. The list can also include deleted config versions that you can restore. The response is an array of objects, each keyed by `configVersionId`.
      parameters:
      - $ref: parameters/includeRecentlyDeleted-query.yaml
      responses:
        200:
          description: |
            The response lists config versions.
          content:
            application/json:
              example:
                $ref: examples/get-config-versions-response.json
              schema:
                $ref: schemas/get-config-version-response.yaml
  /functional/config-versions/{configVersionId}:
    parameters:
    - $ref: parameters/configVersionId-path.yaml
    get:
      operationId: get-config-version
      summary: Get a config version
      tags:
      - Config versions
      description: |
        Returns details of a config version.
      responses:
        200:
          description: |
            The response provides config version details.
          content:
            application/json:
              example:
                $ref: examples/get-config-version-response.json
              schema:
                $ref: schemas/get-config-version-response.yaml
    delete:
      operationId: delete-config-version
      summary: Delete a config version
      tags:
      - Config versions
      description: |
        Deletes a config version from Test Center. You can delete either a config version or a config version with all included objects. The operation has three possible outcomes. When `deleteChildResources` is `false`, the operation responds with the 200 status. When `deleteChildResources` is `true`, the operation responds with the [partial-success 207 response](ref:partial-success-responses). Regardless of the `deleteChildResources` value, the operation responds with a 4xx status if the deletion can't be processed. You can [restore](ref:post-config-version-restore) config versions within 30 days of deleting them.
      parameters:
      - $ref: parameters/deleteChildResources-query.yaml
      responses:
        200:
          description: |
            The response returns details of the deleted config version.
          content:
            application/json:
              example:
                $ref: examples/get-deleted-config-version-response.json
              schema:
                $ref: schemas/getDeletedConfigVersionResponse.yaml
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/get-deleted-config-versions-response.json
              schema:
                $ref: schemas/getDeletedConfigVersionsResponse.yaml
  /functional/config-versions/{configVersionId}/associations/test-suites:
    parameters:
    - $ref: parameters/configVersionId-path.yaml
    get:
      operationId: get-config-version-associations-test-suites
      summary: List test suites associated with a config version
      tags:
      - Config versions
      description: |
        Lists all test suites associated with a config version. The response is an array of objects, each keyed by `testSuiteId`.
      responses:
        200:
          description: |
            The response lists test suites.
          content:
            application/json:
              example:
                $ref: examples/get-test-suites-response.json
              schema:
                $ref: schemas/getTestSuitesResponse.yaml
  /functional/config-versions/{configVersionId}/associations/test-suites/associate:
    parameters:
    - $ref: parameters/configVersionId-path.yaml
    post:
      operationId: post-config-version-associations-test-suites-associate
      summary: Associate test suites with a config version
      tags:
      - Config versions
      description: |
        Associates a list of test suites with a config version. You can associate a test suite with either a requirement or a config version. It can't be associated with both of them at the same time. If you need to associate a particular test suite with both, a requirement and a config version, you can clone the created test suite. See [Clone test suites](ref:post-test-suites-clone). The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array lists unique identifiers of test suites associated successfully, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/test-suites-association-dissociation-request.json
            schema:
              $ref: schemas/testSuitesAssociationRequest.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/test-suites-association-dissociation-response.json
              schema:
                $ref: schemas/testSuitesAssociationResponse.yaml
  /functional/config-versions/{configVersionId}/associations/test-suites/dissociate:
    parameters:
    - $ref: parameters/configVersionId-path.yaml
    post:
      operationId: post-config-version-associations-test-suites-dissociate
      summary: Dissociate test suites from a config version
      tags:
      - Config versions
      description: |
        Dissociates a list of test suites from a config version. The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array lists unique identifiers of test suites dissociated successfully, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/test-suites-association-dissociation-request.json
            schema:
              $ref: schemas/testSuitesAssociationRequest.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/test-suites-association-dissociation-response.json
              schema:
                $ref: schemas/testSuitesAssociationResponse.yaml
  /functional/config-versions/{configVersionId}/restore:
    parameters:
    - $ref: parameters/configVersionId-path.yaml
    post:
      operationId: post-config-version-restore
      summary: Restore a config version
      tags:
      - Config versions
      description: |
        Restores a deleted config version in Test Center. You can restore either an empty config version or a config version together with all the included objects, test suites, functional test cases, test requests, and conditions. The operation has three possible outcomes. When `restoreChildResources` is `false`, a 200 response provides the restored object in the `successes` array. When `restoreChildResources` is `true`, the operation responds with the [partial-success 207 response](ref:partial-success-responses) and various objects in the appropriate `successes` or `failures` arrays. Regardless of the `restoreChildResources` value, if there's a problem with restoring the config version object, the operation responds with a 4xx status.
      parameters:
      - $ref: parameters/restoreChildResources-query.yaml
      responses:
        200:
          description: |
            The response returns the restored config version.
          content:
            application/json:
              example:
                $ref: examples/get-restored-config-version-response.json
              schema:
                $ref: schemas/getRestoredConfigVersionResponse.yaml
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/get-restored-config-versions-response.json
              schema:
                $ref: schemas/getRestoredConfigVersionsResponse.yaml
  /functional/requirements:
    post:
      operationId: post-requirements
      summary: Create a requirement
      tags:
      - Requirements
      description: |
        Creates a new requirement.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/create-requirement-request.json
            schema:
              $ref: schemas/createRequirementRequest.yaml
      responses:
        201:
          description: |
            Successfully created new requirement.
          content:
            application/json:
              example:
                $ref: examples/get-requirement-response.json
              schema:
                $ref: schemas/get-requirement-response.yaml
    get:
      operationId: get-requirements
      summary: List requirements
      tags:
      - Requirements
      description: |
        Lists requirements created in your organization. The list can also include deleted requirements that you can restore. The response is an array of objects, each keyed by `requirementId`.
      parameters:
      - $ref: parameters/includeRecentlyDeleted-query.yaml
      responses:
        200:
          description: |
            The response lists requirements.
          content:
            application/json:
              example:
                $ref: examples/get-requirements-response.json
              schema:
                $ref: schemas/getRequirementsResponse.yaml
  /functional/requirements/{requirementId}:
    parameters:
    - $ref: parameters/requirementId-path.yaml
    get:
      operationId: get-requirement
      summary: Get a requirement
      tags:
      - Requirements
      description: |
        Returns details of a requirement.
      responses:
        200:
          description: |
            The response returns requirement details.
          content:
            application/json:
              example:
                $ref: examples/get-requirement-response.json
              schema:
                $ref: schemas/get-requirement-response.yaml
    put:
      operationId: put-requirement
      summary: Update a requirement
      tags:
      - Requirements
      description: |
        Updates a requirement. For optional, modifiable request members that you don’t include in the request Test Center uses default values.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/update-requirement-request.json
            schema:
              $ref: schemas/updateRequirementRequest.yaml
      responses:
        200:
          description: |
            The response returns the updated requirement.
          content:
            application/json:
              example:
                $ref: examples/update-requirement-response.json
              schema:
                $ref: schemas/get-requirement-response.yaml
    delete:
      operationId: delete-requirement
      summary: Delete a requirement
      tags:
      - Requirements
      description: |
        Deletes a requirement. You can delete either a requirement or a requirement with all included objects. The operation has three possible outcomes. When `deleteChildResources` is `false`, the operation responds with the 200 status. When `deleteChildResources` is `true`, the operation responds with the [partial-success 207 response](ref:partial-success-responses). Regardless of the `deleteChildResources` value, the operation responds with a 4xx status if the deletion can't be processed. You can [restore](ref:post-requirement-restore) requirements within 30 days of deleting them.
      parameters:
      - $ref: parameters/deleteChildResources-query.yaml
      responses:
        200:
          description: |
            The response returns details of the deleted requirement.
          content:
            application/json:
              example:
                $ref: examples/get-deleted-requirement-response.json
              schema:
                $ref: schemas/getDeletedRequirementResponse.yaml
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/get-deleted-requirements-response.json
              schema:
                $ref: schemas/getDeletedRequirementsResponse.yaml
  /functional/requirements/{requirementId}/associations/test-suites:
    parameters:
    - $ref: parameters/requirementId-path.yaml
    get:
      operationId: get-requirement-associations-test-suites
      summary: List test suites associated with a requirement
      tags:
      - Requirements
      description: |
        Lists all test suites associated with a requirement. The response is an array of objects, each keyed by `testSuiteId`.
      responses:
        200:
          description: |
            The response lists test suites.
          content:
            application/json:
              example:
                $ref: examples/get-test-suites-response.json
              schema:
                $ref: schemas/getTestSuitesResponse.yaml
  /functional/requirements/{requirementId}/associations/test-suites/associate:
    parameters:
    - $ref: parameters/requirementId-path.yaml
    post:
      operationId: post-requirement-associations-test-suites-associate
      summary: Associate test suites with a requirement
      tags:
      - Requirements
      description: |
        Associates a list of test suites with a requirement. You can associate a test suite with either a requirement or a config version. It can't be associated with both of them at the same time. If you need to associate a particular test suite with both, a requirement and a config version, you can clone the created test suite. See [Clone test suites](ref:post-test-suites-clone). The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array lists unique identifiers of test suites associated successfully, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/test-suites-association-dissociation-request.json
            schema:
              $ref: schemas/testSuitesAssociationRequest.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/test-suites-association-dissociation-response.json
              schema:
                $ref: schemas/testSuitesAssociationResponse.yaml
  /functional/requirements/{requirementId}/associations/test-suites/dissociate:
    parameters:
    - $ref: parameters/requirementId-path.yaml
    post:
      operationId: post-requirement-associations-test-suites-dissociate
      summary: Dissociate test suites from a requirement
      tags:
      - Requirements
      description: |
        Dissociates a list of test suites from a requirement. The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array lists unique identifiers of test suites dissociated successfully, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/test-suites-association-dissociation-request.json
            schema:
              $ref: schemas/testSuitesAssociationRequest.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/test-suites-association-dissociation-response.json
              schema:
                $ref: schemas/testSuitesAssociationResponse.yaml
  /functional/requirements/{requirementId}/restore:
    parameters:
    - $ref: parameters/requirementId-path.yaml
    post:
      operationId: post-requirement-restore
      summary: Restore a requirement
      tags:
      - Requirements
      description: |
        Restores a deleted requirement. You can restore either an empty requirement or a requirement together with all the included objects, test suites, functional test cases, test requests, and conditions. The operation has three possible outcomes. When `restoreChildResources` is `false`, a 200 response provides the restored object in the `successes` array. When `restoreChildResources` is `true`, the operation responds with the [partial-success 207 response](ref:partial-success-responses) and various objects in the appropriate `successes` or `failures` arrays. Regardless of the `restoreChildResources` value, if there's a problem with restoring the requirement object, the operation responds with a 4xx status.
      parameters:
      - $ref: parameters/restoreChildResources-query.yaml
      responses:
        200:
          description: |
            Successful response.
          content:
            application/json:
              example:
                $ref: examples/get-restored-requirement-response.json
              schema:
                $ref: schemas/getRestoredRequirementResponse.yaml
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/get-restored-requirements-response.json
              schema:
                $ref: schemas/getRestoredRequirementsResponse.yaml
  /functional/test-case-executions/{testCaseExecutionId}/raw-request-response:
    parameters:
    - $ref: parameters/testCaseExecutionId-path.yaml
    get:
      operationId: get-test-case-execution-raw-request-response
      summary: Get transaction details for a functional test case
      tags:
      - Executions
      description: |
        Returns transaction details for a URL of the test request in functional testing.
      responses:
        200:
          description: |
            The response provides transaction details.
          content:
            application/json:
              example:
                $ref: examples/get-functional-raw-request-response.json
              schema:
                $ref: schemas/getRawRequestResponse.yaml
  /functional/test-cases:
    post:
      operationId: post-test-cases
      summary: Create functional test cases
      tags:
      - Test cases
      description: |
        Creates a list of new functional test cases. Each test case consists of a test request, client profile, and condition. The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array consists of successfully created objects, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/create-functional-test-case-request.json
            schema:
              $ref: schemas/create-functional-test-case-request.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/create-functional-test-case-response.json
              schema:
                $ref: schemas/createTestCaseResponse.yaml
    get:
      operationId: get-test-cases
      summary: List functional test cases
      tags:
      - Test cases
      description: |
        Lists functional test cases created in your organization. The list can also include deleted test cases that you can restore. The response is an array of objects, each keyed by `testCaseId`.
      parameters:
      - $ref: parameters/includeRecentlyDeleted-query.yaml
      responses:
        200:
          description: |
            The response lists test cases.
          content:
            application/json:
              example:
                $ref: examples/get-functional-test-cases-response.json
              schema:
                $ref: schemas/getTestCasesResponse.yaml
  /functional/test-cases/clone:
    post:
      operationId: post-test-cases-clone
      summary: Clone functional test cases
      tags:
      - Test cases
      description: |
        Clones a list of functional test cases. To clone a functional test case, you need to modify at least one included object: condition, test request, or client profile. Test Center changes only the objects included in the request. Those not included in the request are taken from the source functional test cases. The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays: `successes` and `failures`. The `successes` array lists all successfully cloned objects, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/clone-functional-test-case-request.json
            schema:
              $ref: schemas/cloneTestCaseRequest.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/clone-functional-test-case-response.json
              schema:
                $ref: schemas/cloneTestCaseResponse.yaml
  /functional/test-cases/{testCaseId}:
    parameters:
    - $ref: parameters/testCaseId-path.yaml
    get:
      operationId: get-test-case
      summary: Get a functional test case
      tags:
      - Test cases
      description: |
        Returns details of a functional test case.
      responses:
        200:
          description: |
            The response provides test case details.
          content:
            application/json:
              example:
                $ref: examples/get-functional-test-cases-response.json
              schema:
                $ref: schemas/get-functional-test-case-response.yaml
    put:
      operationId: put-test-case
      summary: Update a functional test case
      tags:
      - Test cases
      description: |
        Updates a functional test case. For optional, modifiable request members that you don’t include in the request Test Center uses default values.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/update-functional-test-case-request.json
            schema:
              $ref: schemas/update-functional-test-case-request.yaml
      responses:
        200:
          description: |
            The response returns the updated test case.
          content:
            application/json:
              example:
                $ref: examples/update-functional-test-case-response.json
              schema:
                $ref: schemas/get-functional-test-cases-response.yaml
    delete:
      operationId: delete-test-case
      summary: Delete a functional test case
      tags:
      - Test cases
      description: |
        Deletes a functional test case. You can delete either a functional test case or a functional test case with all included objects. The operation has three possible outcomes. When `deleteChildResources` is `false`, the operation responds with the 200 status. When `deleteChildResources` is `true`, the operation responds with the [partial-success 207 response](ref:partial-success-responses). Regardless of the `deleteChildResources` value, the operation responds with a 4xx status if the deletion can't be processed. You can [restore](ref:post-test-case-restore) test cases within 30 days of deleting them.
      parameters:
      - $ref: parameters/deleteChildResources-query.yaml
      responses:
        200:
          description: |
            The response returns details of the deleted test case.
          content:
            application/json:
              example:
                $ref: examples/get-deleted-functional-test-case-response.json
              schema:
                $ref: schemas/getFunctionalDeletedTestCaseResponse.yaml
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/get-deleted-functional-test-cases-response.json
              schema:
                $ref: schemas/getFunctionalDeletedTestCasesResponse.yaml
  /functional/test-cases/{testCaseId}/associations/test-suites:
    parameters:
    - $ref: parameters/testCaseId-path.yaml
    get:
      operationId: get-test-case-associations-test-suites
      summary: List test suites with a functional test case
      tags:
      - Test cases
      description: |
        Lists all test suites that include a functional test case. The response is an array of objects, each keyed by `testSuiteId`.
      responses:
        200:
          description: |
            The response list test suites.
          content:
            application/json:
              example:
                $ref: examples/get-test-suites-response.json
              schema:
                $ref: schemas/get-test-suites-response.yaml
  /functional/test-cases/{testCaseId}/associations/test-suites/associate:
    parameters:
    - $ref: parameters/testCaseId-path.yaml
    post:
      operationId: post-test-case-associations-test-suites-associate
      summary: Assign test suites to a functional test case
      tags:
      - Test cases
      description: |
        Assigns a test suite to a functional test case. You can include a test case in only one test suite. To use the same test case in a different test suite, [create](ref:post-test-cases) the same functional test case again and [include](ref:post-test-suite-associations-test-cases-associate) it in another test suite. The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array lists unique identifiers of test suites assigned successfully, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/test-suites-association-dissociation-request.json
            schema:
              $ref: schemas/post-test-case-associations-test-suites-associate-request.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/test-suites-association-dissociation-response.json
              schema:
                $ref: schemas/testSuitesAssociationResponse.yaml
  /functional/test-cases/{testCaseId}/associations/test-suites/dissociate:
    parameters:
    - $ref: parameters/testCaseId-path.yaml
    post:
      operationId: post-test-case-associations-test-suites-dissociate
      summary: Remove test suites from a functional test case
      tags:
      - Test cases
      description: |
        Removes a list of test suites from a functional test case. The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array lists unique identifiers of test suites removed successfully, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/test-suites-association-dissociation-request.json
            schema:
              $ref: schemas/post-test-case-associations-test-suites-dissociate-request.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/test-suites-association-dissociation-response.json
              schema:
                $ref: schemas/testSuitesAssociationResponse.yaml
  /functional/test-cases/{testCaseId}/restore:
    parameters:
    - $ref: parameters/testCaseId-path.yaml
    post:
      operationId: post-test-case-restore
      summary: Restore a functional test case
      tags:
      - Test cases
      description: |
        Restores a deleted functional test case. You can restore either an empty functional test case or a functional test case together with all the included objects, test requests, and conditions. The operation has three possible outcomes. When `restoreChildResources` is `false`, a 200 response provides the restored object in the `successes` array. When `restoreChildResources` is `true`, the operation responds with the [partial-success 207 response](ref:partial-success-responses) and various objects in the appropriate `successes` or `failures` arrays. Regardless of the `restoreChildResources` value, if there's a problem with restoring the functional test case object, the operation responds with a 4xx status.
      parameters:
      - $ref: parameters/restoreChildResources-query.yaml
      responses:
        200:
          description: |
            The response returns the restored test case.
          content:
            application/json:
              example:
                $ref: examples/get-restored-functional-test-case-response.json
              schema:
                $ref: schemas/getFunctionalRestoredTestCaseResponse.yaml
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/get-restored-functional-test-cases-response.json
              schema:
                $ref: schemas/getFunctionalRestoredTestCasesResponse.yaml
  /functional/test-catalog/conditions:
    post:
      operationId: post-test-catalog-conditions
      summary: Create a condition
      tags:
      - Conditions
      description: |
        Creates a new condition.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/create-condition-request.json
            schema:
              $ref: schemas/createConditionRequest.yaml
      responses:
        201:
          description: |
            Successfully created new condition.
          content:
            application/json:
              example:
                $ref: examples/get-condition-response.json
              schema:
                $ref: schemas/get-condition-response.yaml
    get:
      operationId: get-test-catalog-conditions
      summary: List conditions
      tags:
      - Conditions
      description: |
        Lists conditions created in your organization. The list can also include deleted conditions that you can restore. The response is an array of objects, each keyed by `conditionId`.
      parameters:
      - $ref: parameters/includeRecentlyDeleted-query.yaml
      responses:
        200:
          description: |
            The response lists conditions.
          content:
            application/json:
              example:
                $ref: examples/get-conditions-response.json
              schema:
                $ref: schemas/getConditionsResponse.yaml
  /functional/test-catalog/conditions/{conditionId}:
    parameters:
    - $ref: parameters/conditionId-path.yaml
    get:
      operationId: get-test-catalog-condition
      summary: Get a condition
      tags:
      - Conditions
      description: |
        Returns details of a condition.
      responses:
        200:
          description: |
            The response returns condition details.
          content:
            application/json:
              example:
                $ref: examples/get-condition-response.json
              schema:
                $ref: schemas/get-condition-response.yaml
    put:
      operationId: put-test-catalog-condition
      summary: Update a condition
      tags:
      - Conditions
      description: |
        Updates a condition. For optional, modifiable request members that you don’t include in the request Test Center uses default values.
      parameters:
      - $ref: parameters/conditionId-path.yaml
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/update-condition-request.json
            schema:
              $ref: schemas/updateConditionRequest.yaml
      responses:
        200:
          description: |
            The response returns the updated condition.
          content:
            application/json:
              example:
                $ref: examples/update-condition-response.json
              schema:
                $ref: schemas/get-condition-response.yaml
    delete:
      operationId: delete-test-catalog-condition
      summary: Delete a condition
      tags:
      - Conditions
      description: |
        Deletes a condition. You can [restore](ref:post-test-catalog-condition-restore) conditions within 30 days of deleting them.
      responses:
        204:
          description: |
            Successfully deleted condition.
  /functional/test-catalog/conditions/{conditionId}/associations/test-cases:
    parameters:
    - $ref: parameters/conditionId-path.yaml
    get:
      operationId: get-test-catalog-condition-test-cases
      summary: List functional test cases that use a condition
      tags:
      - Conditions
      description: |
        Lists all functional test cases that use a condition. The response is an array of objects, each keyed by `testCaseId`.
      responses:
        200:
          description: |
            The response lists test cases.
          content:
            application/json:
              example:
                $ref: examples/associated-test-cases-of-condition-response.json
              schema:
                $ref: schemas/getTestCasesResponse.yaml
  /functional/test-catalog/conditions/{conditionId}/restore:
    parameters:
    - $ref: parameters/conditionId-path.yaml
    post:
      operationId: post-test-catalog-condition-restore
      summary: Restore a condition
      tags:
      - Conditions
      description: |
        Restores a deleted condition. A successful operation responds with the 200 status and the restored object in the `successes` array.
      responses:
        200:
          description: |
            The response returns the restored condition.
          content:
            application/json:
              example:
                $ref: examples/get-restored-condition-response.json
              schema:
                $ref: schemas/get-restored-condition-response.yaml
  /functional/test-catalog/template:
    get:
      operationId: get-test-catalog-template
      summary: Get the test catalog template
      tags:
      - Conditions
      description: |
        Returns the test catalog template used for creating conditions. See [Test Center concepts](ref:test-center-concepts).
      responses:
        200:
          description: |
            The response provides the test catalog template.
          content:
            application/json:
              example:
                $ref: examples/get-test-catalog-template-response.json
              schema:
                $ref: schemas/get-test-catalog-template-response.yaml
  /functional/test-requests:
    post:
      operationId: post-test-requests
      summary: Create test requests
      tags:
      - Test requests
      description: |
        Creates a list of new test request. The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array lists all successfully created objects , whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/create-test-request-request.json
            schema:
              $ref: schemas/createTestRequestRequest.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/create-test-request-response.json
              schema:
                $ref: schemas/createTestRequestResponse.yaml
    get:
      operationId: get-test-requests
      summary: List test requests
      tags:
      - Test requests
      description: |
        Lists test requests created in your organization. The list can also include deleted test requests that you can restore. The response is an array of objects, each keyed by `testRequestId`.
      parameters:
      - $ref: parameters/includeRecentlyDeleted-query.yaml
      responses:
        200:
          description: |
            The response lists test requests.
          content:
            application/json:
              example:
                $ref: examples/get-test-requests-response.json
              schema:
                $ref: schemas/getTestRequestsResponse.yaml
  /functional/test-requests/{testRequestId}:
    parameters:
    - $ref: parameters/testRequestId-path.yaml
    get:
      operationId: get-test-request
      summary: Get a test request
      tags:
      - Test requests
      description: |
        Returns details of a test request.
      responses:
        200:
          description: |
            The response provides test request details.
          content:
            application/json:
              example:
                $ref: examples/get-test-request-response.json
              schema:
                $ref: schemas/get-test-request-response.yaml
    put:
      operationId: put-test-request
      summary: Update a test request
      tags:
      - Test requests
      description: |
        Updates a test request. For optional, modifiable request members that you don’t include in the request Test Center uses default values.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/update-test-request-request.json
            schema:
              $ref: schemas/updateTestRequestRequest.yaml
      responses:
        200:
          description: |
            The response returns the updated test request.
          content:
            application/json:
              example:
                $ref: examples/update-test-request-response.json
              schema:
                $ref: schemas/get-test-request-response.yaml
    delete:
      operationId: delete-test-request
      summary: Delete a test request
      tags:
      - Test requests
      description: |
        Deletes a test request. You can [restore](ref:post-test-request-restore) test requests within 30 days of deleting them.
      responses:
        204:
          description: |
            Successfully deleted test request.
  /functional/test-requests/{testRequestId}/associations/test-cases:
    parameters:
    - $ref: parameters/testRequestId-path.yaml
    get:
      operationId: get-test-request-associations-test-cases
      summary: List functional test cases that use a test request
      tags:
      - Test requests
      description: |
        Lists all functional test cases that use a test request. The response is an array of objects, each keyed by `testCaseId`.
      responses:
        200:
          description: |
            The response list test cases.
          content:
            application/json:
              example:
                $ref: examples/associated-test-cases-of-test-request-response.json
              schema:
                $ref: schemas/getTestCasesResponse.yaml
  /functional/test-requests/{testRequestId}/restore:
    parameters:
    - $ref: parameters/testRequestId-path.yaml
    post:
      operationId: post-test-request-restore
      summary: Restore a test request
      tags:
      - Test requests
      description: |
        Restores a deleted test request. A successful operation responds with the 200 status and the restored object in the `successes` array.
      responses:
        200:
          description: |
            The response returns the restored test request.
          content:
            application/json:
              example:
                $ref: examples/get-restored-test-request-response.json
              schema:
                $ref: schemas/getRestoredTestRequestResponse.yaml
  /functional/test-suites:
    post:
      operationId: post-test-suites
      summary: Create a test suite
      tags:
      - Test suites
      description: |
        Creates a new test suite.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/create-test-suite-request.json
            schema:
              $ref: schemas/createTestSuiteRequest.yaml
      responses:
        201:
          description: |
            Successfully created new test suite.
          content:
            application/json:
              example:
                $ref: examples/get-test-suite-response.json
              schema:
                $ref: schemas/get-test-suite-response.yaml
    get:
      operationId: get-test-suites
      summary: List test suites
      tags:
      - Test suites
      description: |
        Lists all test suites created in your organization. The list can also include deleted test suites that you can restore. The response is an array of objects, each keyed by `testSuiteId`.
      parameters:
      - $ref: parameters/includeRecentlyDeleted-query.yaml
      responses:
        200:
          description: |
            The response lists test suites.
          content:
            application/json:
              example:
                $ref: examples/get-test-suites-response.json
              schema:
                $ref: schemas/getTestSuitesResponse.yaml
  /functional/test-suites/clone:
    post:
      operationId: post-test-suites-clone
      summary: Clone test suites
      tags:
      - Test suites
      description: |
        Clones a list of test suites. If an optional request member of the request is missing, Test Center uses the value from the source test suite. See [Default values](ref:default-values). The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array consists of successfully cloned objects, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/clone-test-suite-request.json
            schema:
              $ref: schemas/cloneTestSuiteRequest.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/clone-test-suite-response.json
              schema:
                $ref: schemas/cloneTestSuiteResponse.yaml
  /functional/test-suites/{testSuiteId}:
    parameters:
    - $ref: parameters/testSuiteId-path.yaml
    get:
      operationId: get-test-suite
      summary: Get a test suite
      tags:
      - Test suites
      description: |
        Returns details of a test suite.
      responses:
        200:
          description: |
            The response returns test suite details.
          content:
            application/json:
              example:
                $ref: examples/get-test-suite-response.json
              schema:
                $ref: schemas/get-test-suite-response.yaml
    put:
      operationId: put-test-suite
      summary: Update a test suite
      tags:
      - Test suites
      description: |
        Updates a test suite. For optional, modifiable request members that you don’t include in the request Test Center uses default values.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/update-test-suite-request.json
            schema:
              $ref: schemas/updateTestSuiteRequest.yaml
      responses:
        200:
          description: |
            The response returns the updated test suite.
          content:
            application/json:
              example:
                $ref: examples/update-test-suite-response.json
              schema:
                $ref: schemas/get-test-suite-response.yaml
    delete:
      operationId: delete-test-suite
      summary: Delete a test suite
      tags:
      - Test suites
      description: |
        Deletes a test suite. You can delete either just a test suite or a test suite with all included objects. The operation has three possible outcomes. When `deleteChildResources` is `false`, the operation responds with the 200 status. When `deleteChildResources` is `true`, the operation responds with the [partial-success 207 response](ref:partial-success-responses). Regardless of the `deleteChildResources` value, the operation responds with a 4xx status if the deletion can't be processed. You can [restore](ref:post-test-suite-restore) test suites within 30 days of deleting them.
      parameters:
      - $ref: parameters/deleteChildResources-query.yaml
      responses:
        200:
          description: |
            The response returns details of the deleted test suite.
          content:
            application/json:
              example:
                $ref: examples/get-deleted-test-suite-response.json
              schema:
                $ref: schemas/getDeletedTestSuiteResponse.yaml
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/get-deleted-test-suites-response.json
              schema:
                $ref: schemas/getDeletedTestSuitesResponse.yaml
  /functional/test-suites/{testSuiteId}/access-control:
    parameters:
    - $ref: parameters/testSuiteId-path.yaml
    post:
      operationId: post-test-suite-access-control
      summary: Give access to a locked test suite
      tags:
      - Test suites
      description: |
        Gives the owner or edit access to a locked test suite. You can call this operation only if you're a test suite's owner. The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array contains successfully created objects, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/grant-access-controls-request.json
            schema:
              $ref: schemas/grant-access-control-request.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/grant-access-controls-response.json
              schema:
                $ref: schemas/grantAccessControlsResponse.yaml
    get:
      operationId: get-test-suite-access-control
      summary: Get access lists of a locked test suite
      tags:
      - Test suites
      description: |
        Lists Test Center users or groups of users with the owner or edit access to a locked test suite.
      responses:
        200:
          description: |
            The response lists access groups.
          content:
            application/json:
              example:
                $ref: examples/get-access-controls-response.json
              schema:
                $ref: schemas/getAccesControlsResponse.yaml
  /functional/test-suites/{testSuiteId}/access-control/request:
    parameters:
    - $ref: parameters/testSuiteId-path.yaml
    post:
      operationId: post-test-suite-access-control-request
      summary: Request edit access
      tags:
      - Test suites
      description: |
        Sends a request for the edit access to a locked test suite to its owners.
      responses:
        200:
          description: |
            Successful response.
  /functional/test-suites/{testSuiteId}/access-control/{accessControlId}:
    parameters:
    - $ref: parameters/accessControlId-path.yaml
    - $ref: parameters/testSuiteId-path.yaml
    put:
      operationId: put-test-suite-access-control
      summary: Update an access list
      tags:
      - Test suites
      description: |
        Updates a role assigned to a user or a group in an access list. You can call this operation only if you're a test suite's owner.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/update-access-control-request.json
            schema:
              $ref: schemas/updateAccessControlRequest.yaml
      responses:
        200:
          description: |
            The response returns the updated access list.
          content:
            application/json:
              example:
                $ref: examples/get-access-control-response.json
              schema:
                $ref: schemas/get-access-control-response.yaml
    delete:
      operationId: delete-test-suite-access-control
      summary: Delete an access list
      tags:
      - Test suites
      description: |
        Deletes an access list. The user or the group of users from the list will no longer be able to edit the locked test suite. You can call this operation only if you're a test suite's owner.
      responses:
        204:
          description: |
            Successfully deleted access list.
  /functional/test-suites/{testSuiteId}/access-control/{accessControlId}/approve:
    parameters:
    - $ref: parameters/accessControlId-path.yaml
    - $ref: parameters/testSuiteId-path.yaml
    post:
      operationId: post-test-suite-access-control-approve
      summary: Approve an edit access request
      tags:
      - Test suites
      description: |
        Approves a Test Center user's edit access request to a locked test suite. You can call this operation only if you're a test suite's owner.
      responses:
        200:
          description: |
            Successful response.
  /functional/test-suites/{testSuiteId}/access-control/{accessControlId}/reject:
    parameters:
    - $ref: parameters/accessControlId-path.yaml
    - $ref: parameters/testSuiteId-path.yaml
    post:
      operationId: post-test-suite-access-control-reject
      summary: Reject an edit access request
      tags:
      - Test suites
      description: |
        Rejects a Test Center user's edit access request to a locked test suite. You can call this operation only if you're a test suite's owner.
      responses:
        200:
          description: |
            Successful response.
  /functional/test-suites/{testSuiteId}/associations/config-versions:
    parameters:
    - $ref: parameters/testSuiteId-path.yaml
    get:
      operationId: get-test-suite-associations-config-versions
      summary: List config versions associated with a test suite
      tags:
      - Test suites
      description: |
        Lists all config versions associated with a test suite. The response is an array of objects, each keyed by `configVersionId`.
      responses:
        200:
          description: |
            The response lists config versions.
          content:
            application/json:
              example:
                $ref: examples/get-config-versions-response.json
              schema:
                $ref: schemas/get-config-version-response.yaml
  /functional/test-suites/{testSuiteId}/associations/requirements:
    parameters:
    - $ref: parameters/testSuiteId-path.yaml
    get:
      operationId: get-test-suite-associations-requirements
      summary: List requirements associated with a test suite
      tags:
      - Test suites
      description: |
        Lists all requirements associated with a test suite. The response is an array of objects, each keyed by `requirementId`.
      responses:
        200:
          description: |
            The response lists requirements.
          content:
            application/json:
              example:
                $ref: examples/get-requirements-response.json
              schema:
                $ref: schemas/getRequirementsResponse.yaml
  /functional/test-suites/{testSuiteId}/associations/test-cases:
    parameters:
    - $ref: parameters/testSuiteId-path.yaml
    get:
      operationId: get-test-suite-associations-test-cases
      summary: List functional test cases included in a test suite
      tags:
      - Test suites
      description: |
        Lists all functional test cases included in a test suite. The response is an array of objects, each keyed by `testCaseId`.
      responses:
        200:
          description: |
            The response lists test cases.
          content:
            application/json:
              example:
                $ref: examples/get-functional-test-cases-response.json
              schema:
                $ref: schemas/getTestCasesResponse.yaml
  /functional/test-suites/{testSuiteId}/associations/test-cases/associate:
    parameters:
    - $ref: parameters/testSuiteId-path.yaml
    post:
      operationId: post-test-suite-associations-test-cases-associate
      summary: Include functional test cases in a test suite
      tags:
      - Test suites
      description: |
        Includes a list of functional test cases in a test suite. If the test suite is locked, you can call this operation only if you have the owner or edit access. Because test cases can't be shared between test suites, you can't use functional test cases that are already part of other test suites. If you do that, the operation fails, and you need to [create](ref:post-test-cases) the test cases again and rerun this operation. The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array lists unique identifiers of functional test cases included successfully, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/test-cases-association-dissociation-request.json
            schema:
              $ref: schemas/testCaseAssociationRequest.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/test-cases-association-dissociation-response.json
              schema:
                $ref: schemas/testCaseAssociationResponse.yaml
  /functional/test-suites/{testSuiteId}/associations/test-cases/dissociate:
    parameters:
    - $ref: parameters/testSuiteId-path.yaml
    post:
      operationId: post-test-suite-associations-test-cases-dissociate
      summary: Remove functional test cases from a test suite
      tags:
      - Test suites
      description: |
        Removes a list of functional test cases from a test suite. If the test suite is locked, you can call this operation only if you have the owner or edit access. The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array lists unique identifiers of functional test cases removed successfully, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/test-cases-association-dissociation-request.json
            schema:
              $ref: schemas/testCaseAssociationRequest.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/test-cases-association-dissociation-response.json
              schema:
                $ref: schemas/testCaseAssociationResponse.yaml
  /functional/test-suites/{testSuiteId}/associations/test-cases/order:
    parameters:
    - $ref: parameters/testSuiteId-path.yaml
    post:
      operationId: post-test-suite-associations-test-cases-order
      summary: Include ordered functional test cases in a test suite
      tags:
      - Test suites
      description: |
        Includes a list of functional test cases with a set order in a test suite. A test run executes the functional test cases in the set order only if you include them in a stateful test suite.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/test-cases-order-request-response.json
            schema:
              $ref: schemas/testCasesOrderRequestResponse.yaml
      responses:
        200:
          description: |
            The response provides test cases with new order.
          content:
            application/json:
              example:
                $ref: examples/test-cases-order-request-response.json
              schema:
                $ref: schemas/testCasesOrderRequestResponse.yaml
    get:
      operationId: get-test-suite-associations-test-cases-order
      summary: List order of functional test cases in a stateful test suite
      tags:
      - Test suites
      description: |
        Lists all functional test cases included in a stateful test suite with the set order.
      responses:
        200:
          description: |
            The response list test cases and their order.
          content:
            application/json:
              example:
                $ref: examples/test-cases-order-request-response.json
              schema:
                $ref: schemas/testCasesOrderRequestResponse.yaml
  /functional/test-suites/{testSuiteId}/restore:
    parameters:
    - $ref: parameters/testSuiteId-path.yaml
    post:
      operationId: post-test-suite-restore
      summary: Restore a test suite
      tags:
      - Test suites
      description: |
        Restores a deleted test suite. You can restore either an empty test suite or a test suite together with all the included objects, functional test cases, test requests, and conditions. The operation has three possible outcomes. When `restoreChildResources` is `false`, a 200 response provides the restored object in the `successes` array. When `restoreChildResources` is `true`, the operation responds with the [partial-success 207 response](ref:partial-success-responses) and various objects in the appropriate `successes` or `failures` arrays. Regardless of the `restoreChildResources` value, if there's a problem with restoring the test suite object, the operation responds with a 4xx status.
      parameters:
      - $ref: parameters/restoreChildResources-query.yaml
      responses:
        200:
          description: |
            The response returns the restored test suite.
          content:
            application/json:
              example:
                $ref: examples/get-restored-test-suite-response.json
              schema:
                $ref: schemas/getRestoredTestSuiteResponse.yaml
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/get-restored-test-suites-response.json
              schema:
                $ref: schemas/getRestoredTestSuitesResponse.yaml
  /functional/test-suites/{testSuiteId}/test-cases:
    parameters:
    - $ref: parameters/testSuiteId-path.yaml
    put:
      operationId: put-test-suite-test-cases
      summary: Update test cases in a test suite
      tags:
      - Test suites
      description: |
        Updates functional test cases in the context of a test suite. The operation responds with a [partial-success 207 response](ref:partial-success-responses) that consists of two arrays, `successes` and `failures`. The `successes` array lists all objects updated successfully, whereas the `failures` array provides details on any remainders that failed.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/update-functional-test-cases-for-test-suite-request.json
            schema:
              $ref: schemas/updateTestCasesForTestSuiteRequest.yaml
      responses:
        207:
          description: |
            [Partial success responses](ref:partial-success-responses)
          content:
            application/json:
              example:
                $ref: examples/update-functional-test-cases-for-test-suite-response.json
              schema:
                $ref: schemas/updateTestCasesForTestSuiteResponse.yaml
