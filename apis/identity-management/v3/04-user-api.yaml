openapi: 3.0.0
info:
  title: Users, for administrators
  version: '3'
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
- url: https://{hostname}/identity-management/v3
tags:
- description: If you're an administrator, use these operations to create and manage
    users on your account.
  name: Users
- description: If you're an administrator, use these operations to manage the list
    of properties and includes blocked for a user.
  name: Blocked assets
- description: Use these operations to manage your or, if you're an administrator,
    other users' authentication settings.
  name: User authentication settings
- description: If you're an administrator, use these operations to manage a user's
    multi-factor authentication.
  name: User access
- description: If you're an administrator, use these operations to Set up email notifications
    to remind users about maintenance tasks.
  name: User notifications
- description: If you're an administrator, use these operations toManage a user's
    group and role assignments.
  name: User authorization settings
x-akamai:
  auth-type: EDGE_GRID
  file-path: 04-user-api.yaml
paths:
  /user-admin/ui-identities:
    post:
      operationId: post-ui-identity
      summary: Create a user
      tags:
      - Users
      description: |
        This operation creates a user, or clones an existing user's role assignments, in the account specified in your API client credentials. Optionally, sends a randomly generated one-time use password to the new user. If you send the email with the password directly to the user, the response for this operation doesn't include that password. If you don't send the password to the user through email, the password is included in the response.
      parameters:
      - $ref: parameters/send-email.yaml
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/post-request-create-user.json
            schema:
              $ref: schemas/create-user-request.yaml
      responses:
        201:
          description: |
            User or clone successfully created.
          headers:
            Location:
              $ref: headers/location.yaml
          content:
            application/json:
              example:
                $ref: examples/post-response-create-user.json
              schema:
                $ref: schemas/user-response.yaml
    get:
      operationId: get-ui-identities
      summary: List users
      tags:
      - Users
      description: |
        This operation lists the users who have access to your current account or other managed accounts using the `accountSwitchKey` parameter. The account is determined by the tokens in your API client. You can pass a `groupId` to filter users based on group. You can also return user information such as what product notifications they subscribe to, or what group and role assignments they have. Set  the `actions` parameter to `true` to return the actions you can take on each user.
      parameters:
      - $ref: parameters/roles-filter-params-group-group-id.yaml
      - $ref: parameters/auth-grants-query.yaml
      - $ref: parameters/admin-actions-actions.yaml
      responses:
        200:
          description: |
            The response provides the users on the account.
          content:
            application/json:
              example:
                $ref: examples/get-response-users.json
              schema:
                $ref: schemas/list-of-user-response.yaml
  /user-admin/ui-identities/{uiIdentityId}:
    parameters:
    - $ref: parameters/ui-identity-id-path.yaml
    get:
      operationId: get-ui-identity
      summary: Get a user
      tags:
      - Users
      description: |
        This operation retrieves a user's profile.
      parameters:
      - $ref: parameters/auth-grants-query.yaml
      - $ref: parameters/notifications-query.yaml
      - $ref: parameters/admin-actions-actions.yaml
      responses:
        200:
          description: |
            The response provides the user's profile.
          content:
            application/json:
              example:
                $ref: examples/get-response-user.json
              schema:
                $ref: schemas/user-response.yaml
    delete:
      operationId: delete-ui-identity
      summary: Remove a user
      tags:
      - Users
      description: |
        This operation deletes any user who doesn't own an API client. Before you delete a user with a client, [transfer API client ownership](https://techdocs.akamai.com/iam/docs/transfer-api-client-ownership) to another user.
      responses:
        204:
          description: |
            User successfully deleted.
  /user-admin/ui-identities/{uiIdentityId}/additionalAuthentication:
    parameters:
    - $ref: parameters/ui-identity-id-path.yaml
    put:
      operationId: put-ui-identity-additional-authentication
      summary: Set a user's multi-factor authentication
      tags:
      - User access
      description: |
        This operation sets a user's multi-factor authentication to `TFA`, `MFA`, or `NONE`. Users are allowed five login attempts with MFA or 2FA before their account is locked. If the account is locked, use the [Reset additional authentication](ref:put-ui-identity-reset-additional-authentication) to unlock it.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/put-request-update-additional-authentication.json
            schema:
              $ref: schemas/additional-authentication-request.yaml
      responses:
        204:
          description: |
            Authentication successfully set.
  /user-admin/ui-identities/{uiIdentityId}/additionalAuthentication/reset:
    parameters:
    - $ref: parameters/ui-identity-id-path.yaml
    put:
      operationId: put-ui-identity-reset-additional-authentication
      summary: Reset a user's multi-factor authentication
      tags:
      - User access
      description: |
        This operation prompts the reset of a user's multi-factor authentication method the next time they log in to Control Center. `TFA` indicates two-factor authentication. `MFA` indicates Akamai MFA authentication.
      responses:
        204:
          description: |
            MFA/2FA successfully reset.
  /user-admin/ui-identities/{uiIdentityId}/auth-grants:
    parameters:
    - $ref: parameters/ui-identity-id-path.yaml
    put:
      operationId: put-ui-uiidentity-auth-grants
      summary: Modify a user's group and role assignments
      tags:
      - User authorization settings
      description: |
        This operation edits what groups a user has access to, and how the user interacts with the objects in those groups.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/put-request-auth-grants.json
            schema:
              $ref: schemas/list-of-auth-grant-request.yaml
      responses:
        200:
          description: |
            The response reflects the user's modified group.
          content:
            application/json:
              example:
                $ref: examples/put-response-auth-grants.json
              schema:
                $ref: schemas/list-of-auth-grant-response.yaml
  /user-admin/ui-identities/{uiIdentityId}/basic-info:
    parameters:
    - $ref: parameters/ui-identity-id-path.yaml
    put:
      operationId: put-ui-identity-basic-info
      summary: Update a user
      tags:
      - Users
      description: |
        This operation modifies a user's basic information. Pass the entire body of data in the request, including members you're not changing, or the unspecified data are removed. To edit detailed settings, run the [Modify a user's group and role assignments](ref:put-ui-uiidentity-auth-grants) or [Update a user's notifications](ref:put-notifications) operations.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/put-request-basic-info.json
            schema:
              $ref: schemas/update-user-basic-info-request.yaml
      responses:
        200:
          description: |
            The response reflects the user's modified information.
          content:
            application/json:
              example:
                $ref: examples/put-response-basic-info.json
              schema:
                $ref: schemas/user-response-basic-info.yaml
  /user-admin/ui-identities/{uiIdentityId}/groups/{groupId}/blocked-properties:
    parameters:
    - $ref: parameters/group-id-path.yaml
    - $ref: parameters/ui-identity-id-path.yaml
    get:
      operationId: get-blocked-properties
      summary: List blocked properties and includes
      tags:
      - Blocked assets
      description: |
        This operation lists all properties and includes a user doesn't have access to in a group. Note the responses's set of IDs refer to either properties or includes. To find out which each refers to, see [Manage access to properties and includes](ref:manage-access-to-properties-and-includes).
      responses:
        200:
          description: |
            The response provides the blocked assets.
          content:
            application/json:
              example:
                $ref: examples/get-response-blocked-properties.json
              schema:
                $ref: schemas/list-of-integer.yaml
    put:
      operationId: put-blocked-properties
      summary: Update blocked properties and includes
      tags:
      - Blocked assets
      description: |
        This operation updates the list of blocked properties and includes. By default, users can access all properties and includes in a group, and this operation specifies IDs for any to block. To find out which each refers to, see [Manage access to properties and includes](ref:manage-access-to-properties-and-includes). To get the list of already blocked properties run the [List blocked properties and includes](ref:get-blocked-properties) operation. In this request, include the whole list of properties you want to block. By not including a blocked property, you're unlocking it.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/get-response-blocked-properties.json
            schema:
              $ref: schemas/list-of-integer.yaml
      responses:
        200:
          description: |
            The response provides the unblocked properties.
          content:
            application/json:
              example:
                $ref: examples/get-response-blocked-properties.json
              schema:
                $ref: schemas/list-of-integer.yaml
  /user-admin/ui-identities/{uiIdentityId}/lock:
    parameters:
    - $ref: parameters/ui-identity-id-path.yaml
    post:
      operationId: post-ui-identity-lock
      summary: Lock a user's account
      tags:
      - User authentication settings
      description: |
        This operation locks a user's account, preventing access to Control Center. The result shows in the user data as a read-only `isLocked`: `true` indicator. To allow a user access to Control Center, run the [Unlock a user's account](ref:post-ui-identity-unlock) operation. This sets the `isLocked` indicator to `false`.
      responses:
        204:
          description: |
            User account successfully locked.
  /user-admin/ui-identities/{uiIdentityId}/notifications:
    parameters:
    - $ref: parameters/ui-identity-id-path.yaml
    put:
      operationId: put-notifications
      summary: Update a user's notifications
      tags:
      - User notifications
      description: |
        This operation subscribes or unsubscribes users to product notification emails.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/put-request-update-notifications.json
            schema:
              $ref: schemas/notifications-request.yaml
      responses:
        200:
          description: |
            The response reflects the user's email notification status.
          content:
            application/json:
              example:
                $ref: examples/put-request-update-notifications.json
              schema:
                $ref: schemas/notifications-response.yaml
  /user-admin/ui-identities/{uiIdentityId}/reset-password:
    parameters:
    - $ref: parameters/ui-identity-id-path.yaml
    post:
      operationId: post-reset-password
      summary: Reset a user's password
      tags:
      - User authentication settings
      description: |
        This operation sends a one-time use password to the user. If you send the email with the password directly to the user, the response for this operation doesn't include that password. If you don't send the password to the user through email, the password is included in the response.
      parameters:
      - $ref: parameters/send-email.yaml
      responses:
        200:
          description: |
            Password reset.
          content:
            application/json:
              example:
                $ref: examples/post-response-reset-password.json
              schema:
                $ref: schemas/password-response.yaml
        204:
          description: |
            With `sendEmail` set to `true`, the 204 indicates the user's password was successfully reset.
  /user-admin/ui-identities/{uiIdentityId}/set-password:
    parameters:
    - $ref: parameters/ui-identity-id-path.yaml
    post:
      operationId: post-set-password
      summary: Set a user's password
      tags:
      - User authentication settings
      description: |
        This operation sets a password for a user. This differs from [Reset a user's password](ref:post-reset-password) because this password may be used more than once, and isn't randomly generated.
      requestBody:
        required: true
        content:
          application/json:
            example:
              $ref: examples/post-response-reset-password.json
            schema:
              $ref: schemas/set-password-request.yaml
      responses:
        204:
          description: |
            User's password successfully set.
  /user-admin/ui-identities/{uiIdentityId}/unlock:
    parameters:
    - $ref: parameters/ui-identity-id-path.yaml
    post:
      operationId: post-ui-identity-unlock
      summary: Unlock a user's account
      tags:
      - User authentication settings
      description: |
        This operation releases the lock on a user's account, allowing access to Control Center. The result shows in the user data as a read-only `isLocked`:`false` indicator. To prevent a user access to Control Center, run the [Lock a user's account](ref:post-ui-identity-lock) operation. This sets the `isLocked` indicator to `true`.
      responses:
        204:
          description: |
            Account successfully unlocked.
